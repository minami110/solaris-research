#usda 1.0
(
    defaultPrim = "Geometry"
    framesPerSecond = 24
    metersPerUnit = 1
    timeCodesPerSecond = 24
)

def SkelRoot "character1" (
    kind = "component"
)
{
    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    def SkelAnimation "animation"
    {
        uniform token[] joints = ["point_0", "point_0/point_1", "point_0/point_1/point_2"]
        quatf[] rotations.timeSamples = {
            -8e-9: [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
        }
        half3[] scales.timeSamples = {
            -8e-9: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
        }
        float3[] translations.timeSamples = {
            -8e-9: [(0, 0, 0), (0, 0.5, 0), (0, 0.5, 0)],
        }
    }

    def Mesh "geometry" (
        prepend apiSchemas = ["SkelBindingAPI"]
    )
    {
        int[] faceVertexCounts = [12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 12]
        int[] faceVertexIndices = [0, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 13, 12, 1, 2, 14, 13, 2, 3, 15, 14, 3, 4, 16, 15, 4, 5, 17, 16, 5, 6, 18, 17, 6, 7, 19, 18, 7, 8, 20, 19, 8, 9, 21, 20, 9, 10, 22, 21, 10, 11, 23, 22, 11, 0, 12, 23, 12, 13, 25, 24, 13, 14, 26, 25, 14, 15, 27, 26, 15, 16, 28, 27, 16, 17, 29, 28, 17, 18, 30, 29, 18, 19, 31, 30, 19, 20, 32, 31, 20, 21, 33, 32, 21, 22, 34, 33, 22, 23, 35, 34, 23, 12, 24, 35, 24, 25, 37, 36, 25, 26, 38, 37, 26, 27, 39, 38, 27, 28, 40, 39, 28, 29, 41, 40, 29, 30, 42, 41, 30, 31, 43, 42, 31, 32, 44, 43, 32, 33, 45, 44, 33, 34, 46, 45, 34, 35, 47, 46, 35, 24, 36, 47, 36, 37, 49, 48, 37, 38, 50, 49, 38, 39, 51, 50, 39, 40, 52, 51, 40, 41, 53, 52, 41, 42, 54, 53, 42, 43, 55, 54, 43, 44, 56, 55, 44, 45, 57, 56, 45, 46, 58, 57, 46, 47, 59, 58, 47, 36, 48, 59, 48, 49, 61, 60, 49, 50, 62, 61, 50, 51, 63, 62, 51, 52, 64, 63, 52, 53, 65, 64, 53, 54, 66, 65, 54, 55, 67, 66, 55, 56, 68, 67, 56, 57, 69, 68, 57, 58, 70, 69, 58, 59, 71, 70, 59, 48, 60, 71, 60, 61, 73, 72, 61, 62, 74, 73, 62, 63, 75, 74, 63, 64, 76, 75, 64, 65, 77, 76, 65, 66, 78, 77, 66, 67, 79, 78, 67, 68, 80, 79, 68, 69, 81, 80, 69, 70, 82, 81, 70, 71, 83, 82, 71, 60, 72, 83, 72, 73, 85, 84, 73, 74, 86, 85, 74, 75, 87, 86, 75, 76, 88, 87, 76, 77, 89, 88, 77, 78, 90, 89, 78, 79, 91, 90, 79, 80, 92, 91, 80, 81, 93, 92, 81, 82, 94, 93, 82, 83, 95, 94, 83, 72, 84, 95, 84, 85, 97, 96, 85, 86, 98, 97, 86, 87, 99, 98, 87, 88, 100, 99, 88, 89, 101, 100, 89, 90, 102, 101, 90, 91, 103, 102, 91, 92, 104, 103, 92, 93, 105, 104, 93, 94, 106, 105, 94, 95, 107, 106, 95, 84, 96, 107, 96, 97, 109, 108, 97, 98, 110, 109, 98, 99, 111, 110, 99, 100, 112, 111, 100, 101, 113, 112, 101, 102, 114, 113, 102, 103, 115, 114, 103, 104, 116, 115, 104, 105, 117, 116, 105, 106, 118, 117, 106, 107, 119, 118, 107, 96, 108, 119, 108, 109, 121, 120, 109, 110, 122, 121, 110, 111, 123, 122, 111, 112, 124, 123, 112, 113, 125, 124, 113, 114, 126, 125, 114, 115, 127, 126, 115, 116, 128, 127, 116, 117, 129, 128, 117, 118, 130, 129, 118, 119, 131, 130, 119, 108, 120, 131, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131]
        uniform token orientation = "leftHanded"
        point3f[] points = [(0, 0, 0.047), (-0.0235, 0, 0.040703192), (-0.040703192, 0, 0.0235), (-0.047, 0, 0), (-0.040703192, 0, -0.0235), (-0.0235, 0, -0.040703192), (0, 0, -0.047), (0.0235, 0, -0.040703192), (0.040703192, 0, -0.0235), (0.047, 0, 0), (0.040703192, 0, 0.0235), (0.0235, 0, 0.040703192), (0, 0.1, 0.047), (-0.0235, 0.1, 0.040703192), (-0.040703192, 0.1, 0.0235), (-0.047, 0.1, 0), (-0.040703192, 0.1, -0.0235), (-0.0235, 0.1, -0.040703192), (0, 0.1, -0.047), (0.0235, 0.1, -0.040703192), (0.040703192, 0.1, -0.0235), (0.047, 0.1, 0), (0.040703192, 0.1, 0.0235), (0.0235, 0.1, 0.040703192), (0, 0.2, 0.047), (-0.0235, 0.2, 0.040703192), (-0.040703192, 0.2, 0.0235), (-0.047, 0.2, 0), (-0.040703192, 0.2, -0.0235), (-0.0235, 0.2, -0.040703192), (0, 0.2, -0.047), (0.0235, 0.2, -0.040703192), (0.040703192, 0.2, -0.0235), (0.047, 0.2, 0), (0.040703192, 0.2, 0.0235), (0.0235, 0.2, 0.040703192), (0, 0.3, 0.047), (-0.0235, 0.3, 0.040703192), (-0.040703192, 0.3, 0.0235), (-0.047, 0.3, 0), (-0.040703192, 0.3, -0.0235), (-0.0235, 0.3, -0.040703192), (0, 0.3, -0.047), (0.0235, 0.3, -0.040703192), (0.040703192, 0.3, -0.0235), (0.047, 0.3, 0), (0.040703192, 0.3, 0.0235), (0.0235, 0.3, 0.040703192), (0, 0.4, 0.047), (-0.0235, 0.4, 0.040703192), (-0.040703192, 0.4, 0.0235), (-0.047, 0.4, 0), (-0.040703192, 0.4, -0.0235), (-0.0235, 0.4, -0.040703192), (0, 0.4, -0.047), (0.0235, 0.4, -0.040703192), (0.040703192, 0.4, -0.0235), (0.047, 0.4, 0), (0.040703192, 0.4, 0.0235), (0.0235, 0.4, 0.040703192), (0, 0.5, 0.047), (-0.0235, 0.5, 0.040703192), (-0.040703192, 0.5, 0.0235), (-0.047, 0.5, 0), (-0.040703192, 0.5, -0.0235), (-0.0235, 0.5, -0.040703192), (0, 0.5, -0.047), (0.0235, 0.5, -0.040703192), (0.040703192, 0.5, -0.0235), (0.047, 0.5, 0), (0.040703192, 0.5, 0.0235), (0.0235, 0.5, 0.040703192), (0, 0.6, 0.047), (-0.0235, 0.6, 0.040703192), (-0.040703192, 0.6, 0.0235), (-0.047, 0.6, 0), (-0.040703192, 0.6, -0.0235), (-0.0235, 0.6, -0.040703192), (0, 0.6, -0.047), (0.0235, 0.6, -0.040703192), (0.040703192, 0.6, -0.0235), (0.047, 0.6, 0), (0.040703192, 0.6, 0.0235), (0.0235, 0.6, 0.040703192), (0, 0.7, 0.047), (-0.0235, 0.7, 0.040703192), (-0.040703192, 0.7, 0.0235), (-0.047, 0.7, 0), (-0.040703192, 0.7, -0.0235), (-0.0235, 0.7, -0.040703192), (0, 0.7, -0.047), (0.0235, 0.7, -0.040703192), (0.040703192, 0.7, -0.0235), (0.047, 0.7, 0), (0.040703192, 0.7, 0.0235), (0.0235, 0.7, 0.040703192), (0, 0.8, 0.047), (-0.0235, 0.8, 0.040703192), (-0.040703192, 0.8, 0.0235), (-0.047, 0.8, 0), (-0.040703192, 0.8, -0.0235), (-0.0235, 0.8, -0.040703192), (0, 0.8, -0.047), (0.0235, 0.8, -0.040703192), (0.040703192, 0.8, -0.0235), (0.047, 0.8, 0), (0.040703192, 0.8, 0.0235), (0.0235, 0.8, 0.040703192), (0, 0.9, 0.047), (-0.0235, 0.9, 0.040703192), (-0.040703192, 0.9, 0.0235), (-0.047, 0.9, 0), (-0.040703192, 0.9, -0.0235), (-0.0235, 0.9, -0.040703192), (0, 0.9, -0.047), (0.0235, 0.9, -0.040703192), (0.040703192, 0.9, -0.0235), (0.047, 0.9, 0), (0.040703192, 0.9, 0.0235), (0.0235, 0.9, 0.040703192), (0, 1, 0.047), (-0.0235, 1, 0.040703192), (-0.040703192, 1, 0.0235), (-0.047, 1, 0), (-0.040703192, 1, -0.0235), (-0.0235, 1, -0.040703192), (0, 1, -0.047), (0.0235, 1, -0.040703192), (0.040703192, 1, -0.0235), (0.047, 1, 0), (0.040703192, 1, 0.0235), (0.0235, 1, 0.040703192)] (
            interpolation = "vertex"
        )
        float primvars:pCaptFrame = 0
        int[] primvars:pCaptFrame:indices = None
        string primvars:pCaptSkelRoot = ""
        int[] primvars:pCaptSkelRoot:indices = None
        uniform matrix4d primvars:skel:geomBindTransform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform int[] primvars:skel:jointIndices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 0, 2, 1, 2, 1, 2, 1, 2, 1] (
            elementSize = 2
            interpolation = "vertex"
        )
        uniform float[] primvars:skel:jointWeights = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0.5360091, 0.46399093, 0.5727839, 0.4272161, 0.5368994, 0.4631006, 0.5462123, 0.4537877, 0.5219144, 0.47808555, 0.53792566, 0.4620743, 0.5300947, 0.4699053, 0.53708833, 0.4629117, 0.54329354, 0.45670646, 0.6064599, 0.39354008, 0.5417697, 0.4582303, 0.50813746, 0.49186257, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0.998935, 0.0010649865, 1, 0, 1, 0, 0.9982839, 0.0017160772, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0.9957454, 0.0042545754, 0.98908705, 0.010912956, 0.9929287, 0.0070713256, 0.9906185, 0.009381448, 0.9998748, 0.00012520116, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0.7428499, 0.25715008, 0.84405, 0.15595001, 0.96167314, 0.038326833, 0.58902645, 0.41097352, 0.82035124, 0.17964877, 0.9848422, 0.015157802, 0.84693027, 0.15306975, 1, 0, 0.97490597, 0.02509403, 0.7521474, 0.24785264, 0.9850407, 0.014959269, 0.81038046, 0.18961954] (
            elementSize = 2
            interpolation = "vertex"
        )
        uniform token[] skel:joints = ["point_0", "point_0/point_1", "point_0/point_1/point_2"]
        append rel skel:skeleton = </character1/skeleton>
        uniform token subdivisionScheme = "none"
    }

    def Skeleton "skeleton"
    {
        uniform matrix4d[] bindTransforms = [( (1, -0, -0, 0), (0, 1, -0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (-0, -0, 1, 0), (0, 0.5, -0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (-0, -0, 1, 0), (0, 1, -0, 1) )]
        uniform token[] jointNames = ["point_0", "point_1", "point_2"]
        uniform token[] joints = ["point_0", "point_0/point_1", "point_0/point_1/point_2"]
        uniform token purpose = "guide"
        uniform matrix4d[] restTransforms = [( (1, -0, -0, 0), (0, 1, -0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0.5, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0.5, 0, 1) )]
        append rel skel:animationSource = </character1/animation>
        uniform token visibility = "invisible"
    }
}

